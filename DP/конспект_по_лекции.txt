Процесс разбиения крупной задачи на более мелкие называется декомпозицией.

Оптимальная подструктура  - свойство задач, которое позволяет использовать
динамическое пограммирование и жадные алгоритмы для их решения. Это свой-
ство заключается в том, что оптимальное решение подзадач меньшего размера
может быть использовано для решения исходной задачи.

Жадные алгоритмы  - алгоритмы, которые работают по принципу "жадного вы-
бора", который заключается в том, чтобы на каждом шаге выбирать наилучший
вариант, не обращая внимание на последствия этого выбора. Этот подход час-
то используется в задачах, где можно разделить задачу на подзадачи и ре-
шить каждую подзадачу отдельно. Однако важно помнить, что жадные алгоритмы
работают эффективно, когда локальный оптимальный выбор приводитк глобаль-
но оптимальному решению, но это не всегда так.

Принципы ДП:
1. Разбиение задачи на подзадачи
    Разбиение основной задачи на несколько
    подзадач и решение каждой из них.
2. Принцип оптимальности
    Оптимальное решение задачи зависит от
    оптимальных решений её подзадач.
3. Мемоизоляция
    Сохранение результатов решённых под-
    задач, чтобы не решать их повторно.
Приёмы:
1. Топологическая сортировка
    Позволяет упорядочить задачи таким
    образом, чтобы гарантировать, что
    все зависимости для данной подзадачи
    уже были решены.
    (он сказал, что особенно это полезно в задачах с графами)
2. Техника "скользящего окна"
    Скользящее окно предпологает хра-
    нение только "окна" последних ре-
    зультатов, что может экономить  
    память.
3. Стратегия "разделяй и властвуй"
    Рекурсивное разделение подзадач
    на меньшие части до тех пор, 
    пока они не станут простыми для
    решения. Этот метод может со-
    четаться с ДП для эффективного
    решения.
4. Префиксные и суффиксные суммы
    Предварительное вычисление пре-
    фиксных и суффиксных сумм для
    массивов и строк, чтобы ускорить
    вычисления.

5. Структуры данных для ДП
    Определённые структуры данных,
    такие как сегментные деревья 
    или двоичные индексные деревья,
    могут быть полезны для эффекти-
    вного обновления и запроса ре-
    зультатов подзадач

Сегментные деревья - это ???

Двоичные индексные деревья - ???

6. Оптимизация пространства
    Оптимизация задач ДП изначаль-
    но решённых с использованием
    двумерного массива, для испо-
    льзования одномерного масси-
    ва или даже нескольких пере-
    менных.

7. Состояние и переход
    В задачах ДП очень важно яс-
    но определить, что такое "со-
    стояние"(например, позиция в
    строке, оставшийся вес в за-
    даче о рюкзаке и т.д.) и ка-
    кие "переходы" возможны из
    одного состояния в другое.

8. Профилирование и оптимизация
    Профилирование кода нужно
    для выявления узких мест и
    их оптимизации.

Мемоизация
(Memoization)
Это сохранение результата предыдущего вызова
функции в словаре(или другой структуре дан-
ных) и чтение из него, когда мы снова выпол-
ним точно такой же вызов.